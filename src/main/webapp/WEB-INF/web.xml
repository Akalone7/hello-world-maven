<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">

	<display-name>CleFra - hello wolrd project</display-name>

	<context-param>
		<description>Spring [root] Context config locations</description>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/contexts/applicationContext-infrastructure.xml</param-value>
	</context-param>

	<!-- Spring -->
	<filter>
		<description>
			This filter can either apply its encoding if the request does not
 			already specify an encoding.
		</description>
		<filter-name>characterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>characterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- Spring -->
	<filter>
		<description>
			Filter that converts posted method parameters into HTTP methods.
			Since browsers currently only support GET and POST.
			Required to enable Spring 3.0 REST support.
		</description>
		<filter-name>httpMethodFilter</filter-name>
		<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>httpMethodFilter</filter-name>
		<servlet-name>spring-mvc-dispatcher.backoffice</servlet-name>
	</filter-mapping>

	<!-- Spring Security -->
	<listener>
		<display-name>
			Notifica gli HttpSession events all'Application Context
		</display-name>
		<listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
	</listener>

	<!-- Spring -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

 	<!-- Spring -->
	<servlet>
		<servlet-name>spring-mvc-dispatcher.backoffice</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<description>
				Spring [backoffice] Context config locations
			</description>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/contexts/applicationContext-infrastructure.xml</param-value>
		</init-param>
		<init-param>
			<param-name>namespace</param-name>
			<param-value>backoffice</param-value>
		</init-param>
		<load-on-startup>2</load-on-startup>
	</servlet>

	<!-- Spring -->
	<servlet-mapping>
		<servlet-name>spring-mvc-dispatcher.backoffice</servlet-name>
		<url-pattern>/rest/api/*</url-pattern>
	</servlet-mapping>
	
	<!-- Spring Security -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<description>...</description>
			<param-name>targetBeanName</param-name>
			<param-value>springSecurityFilterChain</param-value>
		</init-param>
	</filter>

	<!-- Spring Security -->
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>INCLUDE</dispatcher>
		<dispatcher>FORWARD</dispatcher>
	</filter-mapping>

	<distributable />
	
	<!-- Embedded Jetty Cors -->
	<filter>
   <filter-name>cross-origin</filter-name>
   <filter-class>org.eclipse.jetty.servlets.CrossOriginFilter</filter-class>
   <init-param>
       <param-name>allowedOrigins</param-name>
       <param-value>*</param-value>
   </init-param>
   <init-param>
       <param-name>allowedTimingOrigins</param-name>
       <param-value>*</param-value>
   </init-param>
   <init-param>
       <param-name>allowedMethods</param-name>
       <param-value>PUT, GET, POST, OPTIONS</param-value>
   </init-param>
   <init-param>
       <param-name>allowedHeaders</param-name>
       <param-value>*</param-value>
   </init-param>
 </filter>
 <filter-mapping>
     <filter-name>cross-origin</filter-name>
     <url-pattern>/*</url-pattern>
 </filter-mapping>
 
 <filter>
 <filter-name>userHeaderJwtFilter</filter-name>
 <filter-class>it.clefra.spring.security.UserHeaderJwtFilter</filter-class>
</filter>
<!-- map the filter to a URL pattern -->
<filter-mapping>
 <filter-name>userHeaderJwtFilter</filter-name>
 <url-pattern>/*</url-pattern>
</filter-mapping>
</web-app>